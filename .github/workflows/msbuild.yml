name: MSBuild

#on:
#  push:
#    tags:
#    - '*'
on: workflow_dispatch

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: "TwoDacConsistencyLogger/TwoDacConsistencyLogger.vcxproj"

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

#    - name: Restore NuGet packages
#      working-directory: ${{env.GITHUB_WORKSPACE}}
#      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Removing all but executable files from build
      run: |
        Remove-Item -Recurse -Force TwoDacConsistencyLogger/Release/*.tlog
        Remove-Item TwoDacConsistencyLogger/Release/*.*
        Remove-Item TwoDacConsistencyLogger/Release/TwoDacConsistencyLogger/*.exp
        Remove-Item TwoDacConsistencyLogger/Release/TwoDacConsistencyLogger/*.lib
        Remove-Item TwoDacConsistencyLogger/Release/TwoDacConsistencyLogger/*.pdb
      shell: powershell
    
    - uses: actions/upload-artifact@v2
      with:
        name: TwoDacConsistencyLogger
        path: TwoDacConsistencyLogger/Release

    - name: GH Release
  # You may pin to the exact commit or the version.
  # uses: softprops/action-gh-release@6034af24fba4e5a8e975aaa6056554efe4c794d0
      uses: softprops/action-gh-release@v0.1.13
      #with:
      #  # Note-worthy description of changes in release
      #  body: # optional
      #  # Path to load note-worthy description of changes in release from
      #  body_path: # optional
      #  # Gives the release a custom name. Defaults to tag name
      #  name: # optional
      #  # Gives a tag name. Defaults to github.GITHUB_REF
      #  tag_name: # optional
      #  # Creates a draft release. Defaults to false
      #  draft: # optional
      #  # Identify the release as a prerelease. Defaults to false
      #  prerelease: # optional
      #  # Newline-delimited list of path globs for asset files to upload
      #  files: # optional
      #  # Fails if any of the `files` globs match nothing. Defaults to false
      #  fail_on_unmatched_files: # optional
      #  # Repository to make releases against, in <owner>/<repo> format
      #  repository: # optional
      #  # Authorized secret GitHub Personal Access Token. Defaults to github.token
      #  token: # optional, default is ${{ github.token }}
      #  # Commitish value that determines where the Git tag is created from. Can be any branch or commit SHA.
      #  target_commitish: # optional
      #  # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored.
      #  discussion_category_name: # optional

